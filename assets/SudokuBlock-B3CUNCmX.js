import{d as v,u as x,s as h,a,o as u,c as n,F as l,r as d,i as c,n as y,e as V,m as w,_ as B}from"./index-nnudsrOq.js";const C={key:0,class:"flex flex-col border-2 border-black h-[440px] max-w-[440px]"},S=["disabled","value","onInput"],I=v({__name:"SudokuBlock",setup(N){const r=x(),{sudokuBlock:f,isStarted:p,isCompleted:b,isPaused:m}=h(r),_=(o,i)=>{const t=i.target;let s=t.value.replace(/[^1-9]/g,"");s.length>1&&(s=s.slice(0,1),t.value=s);const e=parseFloat(s);if(o.guess!==e){if(Number.isNaN(e)){t.value="";return}r.recordMove(o,e),w(o,e),o.isError?r.scorePenalty():(r.scoreSuccess(),b.value&&r.finishGame())}};return(o,i)=>a(p)?(u(),n("div",C,[(u(!0),n(l,null,d(a(f),(t,s)=>(u(),n("div",{key:s,class:"flex w-full h-full sudoku-row"},[(u(!0),n(l,null,d(t,(e,k)=>(u(),n("input",{key:k,type:"number",disabled:e.isVisible||a(c)(e)||a(m),value:e.isVisible&&e.value||!e.isVisible&&e.guess,class:y(["sudoku-cell text-center text-lg font-bold border border-gray-300 outline-none disabled:cursor-not-allowed w-full h-full",e.isVisible?"bg-gray-200":"",e.isError?"bg-red-200":"",a(c)(e)?"bg-green-400":""]),onInput:g=>_(e,g)},null,42,S))),128))]))),128))])):V("",!0)}}),F=B(I,[["__scopeId","data-v-ed3dbe46"]]);export{F as default};
